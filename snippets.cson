# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js':
  'Pearson Correlation':
    'prefix': 'pearson'
    'body': """
      function getPearsonsCorrelation(x, y) {
        var shortestArrayLength = 0;
        if(x.length == y.length) {
            shortestArrayLength = x.length;
        }
        else if(x.length > y.length) {
            shortestArrayLength = y.length;
            console.error('x has more items in it, the last ' + (x.length - shortestArrayLength) + ' item(s) will be ignored');
        }
        else {
            shortestArrayLength = x.length;
            console.error('y has more items in it, the last ' + (y.length - shortestArrayLength) + ' item(s) will be ignored');
        }

        var xy = [];
        var x2 = [];
        var y2 = [];

        for(var i=0; i<shortestArrayLength; i++) {
            xy.push(x[i] * y[i]);
            x2.push(x[i] * x[i]);
            y2.push(y[i] * y[i]);
        }

        var sum_x = 0;
        var sum_y = 0;
        var sum_xy = 0;
        var sum_x2 = 0;
        var sum_y2 = 0;

        for(var i=0; i<shortestArrayLength; i++) {
            sum_x += x[i];
            sum_y += y[i];
            sum_xy += xy[i];
            sum_x2 += x2[i];
            sum_y2 += y2[i];
        }

        var step1 = (shortestArrayLength * sum_xy) - (sum_x * sum_y);
        var step2 = (shortestArrayLength * sum_x2) - (sum_x * sum_x);
        var step3 = (shortestArrayLength * sum_y2) - (sum_y * sum_y);
        var step4 = Math.sqrt(step2 * step3);
        var answer = step1 / step4;

        if (isNaN(answer)) return 0;
        return answer;
      };
    """

  'Create Spec':
    'prefix': 'spec'
    'body': """
      'use strict';

      const expect = require('chai').expect;

      describe('$1', () => {
        $2
      });
    """

  'Require Root':
    'prefix': 'root'
    'body': """
      const path = require('path');
      global.appRoot = path.resolve(__dirname);
      const $1 = require(appRoot + '/$2');
      $3
    """

  'BDD Expect Statement':
    'prefix': 'exp'
    'body': 'expect($1)$2'

  'BDD To be a Statement':
    'prefix': 'toba'
    'body': 'to.be.a($1);$2'

  'BDD to equal':
    'prefix': 'toequal'
    'body': 'to.eq($1);$2'

  'BDD to have length':
    'prefix': 'tohavelength'
    'body': 'to.have.length($1);$2'

  'BDD to have property':
    'prefix': 'tohaveproperty'
    'body': 'to.have.property($1);$2'

  'Blank Lambda function':
    'prefix': 'lamb'
    'body': """
      ($1) => {
        $2
      };
    """

  'Use Strict':
    'prefix': 'str'
    'body': '"use strict";'

  'Create contents of Gulpfile for testing':
    'prefix': 'gulp-me'
    'body': """
      var gulp = require('gulp');
      var mocha = require('gulp-mocha');
      var util = require('gulp-util');
      var exec = require('child_process').exec;

      gulp.task('test', function () {
          return gulp.src(['test/**/*.js'], { read: false })
              .pipe(mocha({ reporter: 'spec' }))
              .on('error', util.log);
      });

      gulp.task('watch-test', function () {
          gulp.watch(['views/**', 'public/**', 'app.js', 'framework/**', 'test/**'], ['test']);
      });
    """

  'Create Module Export Function':
    'prefix': 'exports'
    'body': """
      "use strict";

      var $1 = ($2) => {
        $3
      };

      module.exports = $1;
    """
  'Create DynamoDB create export function':
    'prefix': 'dynamo_create_exp'
    'body': """
      export function $1($2) {
        return new Promise((resolve, reject) => {
          let params = {
            TableName: $3,
            Item: $2
          };

          docClient.put(params, (err, data) => {
            if(err) return reject(err);
            return resolve($2);
          });
        });
      };

      $4
    """

  'Create DynamoDB get export function':
    'prefix': 'dynamo_get_exp'
    'body': """
      export function $1($2) {
        return new Promise((resolve, reject) => {
          let params = {
            TableName: $3,
            Key: [
              $2: $2
            ],
            AttributesToGet: [
              $4
            ]
          };

          docClient.put(params, (err, data) => {
            if(err) return reject(err);
            return resolve(data["Items"]);
          });
        });
      };
    """

'.source.yaml':
  'Kinesis Stream for CloudFormation':
    'prefix': 'kinesis.yml'
    'body': """
      defaults:
        stage: dev
        region: us-east-1
        stream-name: $0
        iamRoleStatements:
          - Effect: "Allow"
            Action:
              - kinesis:${1:"PutRecord"}
            Resource:
              Fn::GetAtt:
                - ${2:"Name"}Stream
                - Arn

      functions:
        create:
          handler: $0.create
          events:
            - http:
                path: $0
                method: ${3:"POST"}
                request:
                  template:
                    application/json: >
                      {
                        "headers": {
                          "Content-Type" : "application/x-amz-json-1.1"
                        },
                        "body": {
                          "StreamName": "$0",
                          "Data": "$util.base64Encode($input.path('$.Data'))",
                          "PartitionKey": "$context.identity.caller",
                          "SequenceNumberForOrdering": "$.$4"
                        }
                      }

      resources:
        Resources:
          ${2:"Name"}Stream:
            Type: AWS::Kinesis::Stream
            Properties:
              Name: $0
              ShardCount: 1
          RestApiApigEvent:
            Type: AWS::ApiGateway::RestApi
            Properties:
              Name: $0-api
          ProxyResource:
            Type: AWS::ApiGateway::Resource
            Properties:
              ParentId:
                Fn::GetAtt:
                  - RestApiApigEvent # our default Rest API logical ID
                  - RootResourceId
              PathPart: payment # the endpoint in your API that is set as proxy
              RestApiId:
                Ref: RestApiApigEvent
          ProxyMethod:
            Type: AWS::ApiGateway::Method
            Properties:
              HttpMethod: ${3:"POST"}
              AuthorizationType: NONE
              MethodResponses:
                - StatusCode: 202
              ResourceId:
                Ref: ProxyResource
              RestApiId:
                Ref: RestApiApigEvent
              Integration:
                IntegrationHttpMethod: ${3:"POST"}
                Type: AWS
                Uri: arn:aws:apigateway:<region>:kinesis:action/${1:"PutRecord"}
                Credentials:
                  Fn::GetAtt:
                    - ${2:"Name"}Stream
                    - Arn
                IntegrationResponses:
                  - StatusCode: 200

    """
