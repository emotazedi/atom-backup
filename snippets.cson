# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js':
  'Pearson Correlation':
    'prefix': 'pearson'
    'body': """
      function getPearsonsCorrelation(x, y) {
        var shortestArrayLength = 0;
        if(x.length == y.length) {
            shortestArrayLength = x.length;
        }
        else if(x.length > y.length) {
            shortestArrayLength = y.length;
            console.error('x has more items in it, the last ' + (x.length - shortestArrayLength) + ' item(s) will be ignored');
        }
        else {
            shortestArrayLength = x.length;
            console.error('y has more items in it, the last ' + (y.length - shortestArrayLength) + ' item(s) will be ignored');
        }

        var xy = [];
        var x2 = [];
        var y2 = [];

        for(var i=0; i<shortestArrayLength; i++) {
            xy.push(x[i] * y[i]);
            x2.push(x[i] * x[i]);
            y2.push(y[i] * y[i]);
        }

        var sum_x = 0;
        var sum_y = 0;
        var sum_xy = 0;
        var sum_x2 = 0;
        var sum_y2 = 0;

        for(var i=0; i<shortestArrayLength; i++) {
            sum_x += x[i];
            sum_y += y[i];
            sum_xy += xy[i];
            sum_x2 += x2[i];
            sum_y2 += y2[i];
        }

        var step1 = (shortestArrayLength * sum_xy) - (sum_x * sum_y);
        var step2 = (shortestArrayLength * sum_x2) - (sum_x * sum_x);
        var step3 = (shortestArrayLength * sum_y2) - (sum_y * sum_y);
        var step4 = Math.sqrt(step2 * step3);
        var answer = step1 / step4;

        if (isNaN(answer)) return 0;
        return answer;
      };
    """

  'Create Spec':
    'prefix': 'spec'
    'body': """
      'use strict';

      const expect = require('chai').expect;

      describe('$1', () => {
        $2
      });
    """

  'Require Root':
    'prefix': 'root'
    'body': """
      const path = require('path');
      global.appRoot = path.resolve(__dirname);
      const $1 = require(appRoot + '/$2');
      $3
    """

  'BDD Expect Statement':
    'prefix': 'exp'
    'body': 'expect($1)$2'

  'BDD To be a Statement':
    'prefix': 'toba'
    'body': 'to.be.a($1);$2'

  'BDD to equal':
    'prefix': 'toequal'
    'body': 'to.eq($1);$2'

  'BDD to have length':
    'prefix': 'tohavelength'
    'body': 'to.have.length($1);$2'

  'BDD to have property':
    'prefix': 'tohaveproperty'
    'body': 'to.have.property($1);$2'

  'Blank Lambda function':
    'prefix': 'lamb'
    'body': """
      ($1) => {
        $2
      };
    """

  'Use Strict':
    'prefix': 'str'
    'body': '"use strict";'

  'Create contents of Gulpfile for testing':
    'prefix': 'gulp-me'
    'body': """
      var gulp = require('gulp');
      var mocha = require('gulp-mocha');
      var util = require('gulp-util');

      gulp.task('test', function () {
          return gulp.src(['test/**/*.js'], { read: false })
              .pipe(mocha({ reporter: 'spec' }))
              .on('error', util.log);
      });

      gulp.task('watch-test', function () {
          gulp.watch(['views/**', 'public/**', 'app.js', 'framework/**', 'test/**'], ['test']);
      });
    """

  'Create Module Export Function':
    'prefix': 'exports'
    'body': """
      "use strict";

      module.exports = ($1) => {
        function $2() {
          $3
        }
      };
    """
